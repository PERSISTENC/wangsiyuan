(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{409:function(t,a,n){"use strict";n.r(a);var s=n(56),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"闭包是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包是什么"}},[t._v("#")]),t._v(" 闭包是什么?")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("闭包是指有权访问另一个函数作用域中得变量得函数\n\nfunction demo (){\n    const name = '王思渊'\n    return function (){\n        console.log(name)\n    }\n}\n\n通俗点讲, 返回的子函数里面访问父函数的变量，这一个行为称之为闭包\n")])])]),n("h2",{attrs:{id:"闭包的好处和危害"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包的好处和危害"}},[t._v("#")]),t._v(" 闭包的好处和危害?")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("作用域： 作用域更加独立，不会影响和污染全局变量，能更好的封装对象\n内存泄漏：因为变量始终被函数所引用，所以私有变量无法被销毁，常驻内存中，增大了内容消耗，容易造成内存泄漏\n")])])]),n("h2",{attrs:{id:"闭包的应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包的应用场景"}},[t._v("#")]),t._v(" 闭包的应用场景")]),t._v(" "),n("p",[t._v("防抖 节流 计时器 等等.....")])])}),[],!1,null,null,null);a.default=e.exports}}]);